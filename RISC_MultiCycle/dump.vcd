$date
	Wed Jun 25 15:51:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Testbench $end
$scope module dut $end
$var wire 1 ! EX_reset $end
$var wire 1 " ID_reset $end
$var wire 1 # MEM_reset $end
$var wire 1 $ WB_reset $end
$var wire 1 % clk $end
$var wire 1 & zero $end
$var wire 1 ' wen $end
$var wire 32 ( wdat [31:0] $end
$var wire 32 ) read2 [31:0] $end
$var wire 32 * read1 [31:0] $end
$var wire 1 + memwriteen $end
$var wire 32 , loadfromMem [31:0] $end
$var wire 32 - instruction [31:0] $end
$var wire 32 . immExtended [31:0] $end
$var wire 1 / branch $end
$var wire 8 0 address [7:0] $end
$var wire 1 1 WB_wen $end
$var wire 32 2 WB_readD [31:0] $end
$var wire 1 3 WB_WBSel $end
$var wire 32 4 WB_Instruction [31:0] $end
$var wire 32 5 WB_ALUResult [31:0] $end
$var wire 1 6 WBSel $end
$var wire 8 7 PCplus4 [7:0] $end
$var wire 1 8 MEM_wen $end
$var wire 32 9 MEM_wdat [31:0] $end
$var wire 1 : MEM_memwriteen $end
$var wire 1 ; MEM_WBSel $end
$var wire 8 < MEM_PCplus4 [7:0] $end
$var wire 32 = MEM_Instruction [31:0] $end
$var wire 32 > MEM_ALUResult [31:0] $end
$var wire 8 ? ID_PCplus4 [7:0] $end
$var wire 32 @ ID_Instruction [31:0] $end
$var wire 1 A EX_wen $end
$var wire 32 B EX_read2 [31:0] $end
$var wire 32 C EX_read1 [31:0] $end
$var wire 1 D EX_memwriteen $end
$var wire 1 E EX_branch $end
$var wire 1 F EX_WBSel $end
$var wire 8 G EX_PCplus4 [7:0] $end
$var wire 32 H EX_Instruction [31:0] $end
$var wire 32 I EX_Immediate [31:0] $end
$var wire 8 J EX_BranchAddr [7:0] $end
$var wire 4 K EX_ALUsel [3:0] $end
$var wire 1 L EX_ALUSrc $end
$var wire 32 M EX_ALUResult [31:0] $end
$var wire 8 N BranchInstr [7:0] $end
$var wire 4 O ALUsel [3:0] $end
$var wire 1 P ALUSrc $end
$scope module Ctrl $end
$var wire 3 Q f3 [2:0] $end
$var wire 7 R f7 [6:0] $end
$var wire 7 S opcode [6:0] $end
$var reg 1 P ALUSrc $end
$var reg 4 T ALUsel [3:0] $end
$var reg 1 6 WBSel $end
$var reg 1 / branch $end
$var reg 1 + memwriteen $end
$var reg 1 ' wen $end
$upscope $end
$scope module DM $end
$var wire 1 % clk $end
$var wire 32 U readD [31:0] $end
$var wire 32 V wdat [31:0] $end
$var wire 1 : memwriteen $end
$var wire 32 W address [31:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module EX_R_MEM $end
$var wire 1 Y EX_branch $end
$var wire 1 % clk $end
$var wire 1 # reset $end
$var wire 1 A EX_wen $end
$var wire 32 Z EX_wdat [31:0] $end
$var wire 1 D EX_memwriteen $end
$var wire 1 F EX_WBSel $end
$var wire 8 [ EX_PCplus4 [7:0] $end
$var wire 32 \ EX_Instruction [31:0] $end
$var wire 32 ] EX_ALUResult [31:0] $end
$var reg 32 ^ MEM_ALUResult [31:0] $end
$var reg 32 _ MEM_Instruction [31:0] $end
$var reg 8 ` MEM_PCplus4 [7:0] $end
$var reg 1 ; MEM_WBSel $end
$var reg 1 a MEM_branch $end
$var reg 1 : MEM_memwriteen $end
$var reg 32 b MEM_wdat [31:0] $end
$var reg 1 8 MEM_wen $end
$upscope $end
$scope module ID_R_EX $end
$var wire 1 P ALUSrc $end
$var wire 4 c ALUsel [3:0] $end
$var wire 1 6 WBSel $end
$var wire 1 / branch $end
$var wire 1 % clk $end
$var wire 1 + memwriteen $end
$var wire 1 ! reset $end
$var wire 1 ' wen $end
$var wire 32 d ID_read2 [31:0] $end
$var wire 32 e ID_read1 [31:0] $end
$var wire 8 f ID_PCplus4 [7:0] $end
$var wire 32 g ID_Instruction [31:0] $end
$var wire 32 h ID_Immediate [31:0] $end
$var wire 8 i ID_BranchAddr [7:0] $end
$var reg 1 L EX_ALUSrc $end
$var reg 4 j EX_ALUsel [3:0] $end
$var reg 8 k EX_BranchAddr [7:0] $end
$var reg 32 l EX_Immediate [31:0] $end
$var reg 32 m EX_Instruction [31:0] $end
$var reg 8 n EX_PCplus4 [7:0] $end
$var reg 1 F EX_WBSel $end
$var reg 1 E EX_branch $end
$var reg 1 D EX_memwriteen $end
$var reg 32 o EX_read1 [31:0] $end
$var reg 32 p EX_read2 [31:0] $end
$var reg 1 A EX_wen $end
$upscope $end
$scope module IF_R_ID $end
$var wire 1 % clk $end
$var wire 1 " reset $end
$var wire 32 q IF_instruction [31:0] $end
$var wire 8 r IF_PCplus4 [7:0] $end
$var reg 32 s ID_Instruction [31:0] $end
$var reg 8 t ID_PCplus4 [7:0] $end
$upscope $end
$scope module IM $end
$var wire 8 u address [7:0] $end
$var reg 32 v IF_instruction [31:0] $end
$upscope $end
$scope module IPC4 $end
$var wire 8 w PCplus4 [7:0] $end
$var wire 32 x immediate [31:0] $end
$var wire 8 y BranchAddr [7:0] $end
$upscope $end
$scope module ImG $end
$var wire 32 z instr [31:0] $end
$var reg 32 { immediate [31:0] $end
$upscope $end
$scope module MEM_R_WB $end
$var wire 32 | MEM_ALUResult [31:0] $end
$var wire 32 } MEM_Instruction [31:0] $end
$var wire 1 ; MEM_WBSel $end
$var wire 32 ~ MEM_out [31:0] $end
$var wire 1 8 MEM_wen $end
$var wire 1 % clk $end
$var wire 1 $ reset $end
$var reg 32 !" WB_ALUResult [31:0] $end
$var reg 32 "" WB_Instruction [31:0] $end
$var reg 1 3 WB_WBSel $end
$var reg 32 #" WB_readD [31:0] $end
$var reg 1 1 WB_wen $end
$upscope $end
$scope module PC $end
$var wire 8 $" BranchInstr [7:0] $end
$var wire 1 E branch $end
$var wire 1 % clk $end
$var wire 1 & zero $end
$var wire 8 %" PCplus4 [7:0] $end
$var reg 8 &" address [7:0] $end
$upscope $end
$scope module RF $end
$var wire 1 % clk $end
$var wire 5 '" rd [4:0] $end
$var wire 5 (" rs [4:0] $end
$var wire 5 )" rt [4:0] $end
$var wire 1 1 wen $end
$var wire 32 *" wdat [31:0] $end
$var reg 32 +" read1 [31:0] $end
$var reg 32 ," read2 [31:0] $end
$var integer 32 -" i [31:0] $end
$upscope $end
$scope module WB $end
$var wire 32 ." ALUResult [31:0] $end
$var wire 32 /" LoadData [31:0] $end
$var wire 1 3 WBSel $end
$var reg 32 0" WriteBack [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 L ALUSrc $end
$var wire 32 1" a [31:0] $end
$var wire 32 2" b [31:0] $end
$var wire 32 3" imm [31:0] $end
$var wire 4 4" sel [3:0] $end
$var reg 32 5" bornotb [31:0] $end
$var reg 32 6" operand2 [31:0] $end
$var reg 32 7" out [31:0] $end
$var reg 32 8" sum [31:0] $end
$var reg 1 & zero $end
$upscope $end
$scope module pc4 $end
$var wire 8 9" address [7:0] $end
$var wire 8 :" IF_PCplus4 [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100 :"
b0 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
b100000 -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
b0 &"
b100 %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
b10100000000000010010011 v
b0 u
bx t
bx s
b100 r
b10100000000000010010011 q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
xa
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
zY
b1000000 X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
xP
bx O
bx N
bx M
xL
bx K
bx J
bx I
bx H
bx G
xF
xE
xD
bx C
bx B
xA
bx @
bx ?
bx >
bx =
bx <
x;
x:
bx 9
x8
b100 7
x6
bx 5
bx 4
x3
bx 2
x1
b0 0
x/
bx .
b10100000000000010010011 -
bx ,
x+
bx *
bx )
bx (
x'
x&
0%
z$
z#
z"
z!
$end
#5
b0 O
b0 T
b0 c
1'
06
0+
0P
0/
b0 )
b0 d
b0 ,"
b0 *
b0 e
b0 +"
b1001 N
b1001 i
b1001 y
b101000000000000100010011 -
b101000000000000100010011 q
b101000000000000100010011 v
b0 Q
b0 R
b10011 S
b101 )"
b0 ("
b101 .
b101 h
b101 x
b101 {
b1000 7
b1000 r
b1000 %"
b1000 :"
b100 0
b100 u
b100 &"
b100 9"
za
b100 ?
b100 f
b100 t
b100 w
b10100000000000010010011 @
b10100000000000010010011 g
b10100000000000010010011 s
b10100000000000010010011 z
1%
#10
0%
#15
b1000001000000110110011 -
b1000001000000110110011 q
b1000001000000110110011 v
b101 M
b101 ]
b101 7"
0&
b101 8"
b101 5"
b101 6"
b1010 )"
b1010 .
b1010 h
b1010 x
b1010 {
b1100 7
b1100 r
b1100 %"
b1100 :"
b1000 0
b1000 u
b1000 &"
b1000 9"
b10100000000000010010011 H
b10100000000000010010011 \
b10100000000000010010011 m
b0 B
b0 Z
b0 p
b0 2"
b0 C
b0 o
b0 1"
b1001 J
b1001 k
b1001 $"
b0 K
b0 j
b0 4"
0D
0E
0F
1A
0L
b100 G
b100 [
b100 n
b101 I
b101 l
b101 3"
b10010 N
b10010 i
b10010 y
b1000 ?
b1000 f
b1000 t
b1000 w
b101000000000000100010011 @
b101000000000000100010011 g
b101000000000000100010011 s
b101000000000000100010011 z
1%
#20
0%
#25
1'
1P
b1100000010000000100011 -
b1100000010000000100011 q
b1100000010000000100011 v
b0 ,
b0 U
b0 ~
b1010 M
b1010 ]
b1010 7"
b1010 8"
b1010 5"
b1010 6"
b110011 S
b10 )"
b1 ("
b0 .
b0 h
b0 x
b0 {
b10000 7
b10000 r
b10000 %"
b10000 :"
b1100 0
b1100 u
b1100 &"
b1100 9"
b10100000000000010010011 =
b10100000000000010010011 _
b10100000000000010010011 }
0:
0;
18
b0 9
b0 V
b0 b
b101 >
b101 W
b101 ^
b101 |
b100 <
b100 `
b101000000000000100010011 H
b101000000000000100010011 \
b101000000000000100010011 m
b10010 J
b10010 k
b10010 $"
b1000 G
b1000 [
b1000 n
b1010 I
b1010 l
b1010 3"
b1100 N
b1100 i
b1100 y
b1100 ?
b1100 f
b1100 t
b1100 w
b1000001000000110110011 @
b1000001000000110110011 g
b1000001000000110110011 s
b1000001000000110110011 z
1%
#30
0%
#35
1+
0'
b10001000000011 -
b10001000000011 q
b10001000000011 v
b0 M
b0 ]
b0 7"
b0 8"
b0 5"
b0 6"
b10 Q
b100011 S
b11 )"
b0 ("
b1 '"
b101 (
b101 *"
b101 0"
b10100 7
b10100 r
b10100 %"
b10100 :"
b10000 0
b10000 u
b10000 &"
b10000 9"
b101000000000000100010011 =
b101000000000000100010011 _
b101000000000000100010011 }
b1010 >
b1010 W
b1010 ^
b1010 |
b1000 <
b1000 `
b1000001000000110110011 H
b1000001000000110110011 \
b1000001000000110110011 m
b1100 J
b1100 k
b1100 $"
1L
b1100 G
b1100 [
b1100 n
b0 I
b0 l
b0 3"
b10000 N
b10000 i
b10000 y
b10000 ?
b10000 f
b10000 t
b10000 w
b1100000010000000100011 @
b1100000010000000100011 g
b1100000010000000100011 s
b1100000010000000100011 z
b10100000000000010010011 4
b10100000000000010010011 ""
b0 2
b0 #"
b0 /"
b101 5
b101 !"
b101 ."
03
11
1%
#40
0%
#45
0P
1'
16
0+
b1000000000100100000001010110011 -
b1000000000100100000001010110011 q
b1000000000100100000001010110011 v
b11 S
b0 )"
b10 '"
b1010 (
b1010 *"
b1010 0"
b11000 7
b11000 r
b11000 %"
b11000 :"
b10100 0
b10100 u
b10100 &"
b10100 9"
b1000001000000110110011 =
b1000001000000110110011 _
b1000001000000110110011 }
b0 >
b0 W
b0 ^
b0 |
b1100 <
b1100 `
b1100000010000000100011 H
b1100000010000000100011 \
b1100000010000000100011 m
b10000 J
b10000 k
b10000 $"
1D
0A
b10000 G
b10000 [
b10000 n
b10100 N
b10100 i
b10100 y
b10100 ?
b10100 f
b10100 t
b10100 w
b10001000000011 @
b10001000000011 g
b10001000000011 s
b10001000000011 z
b101000000000000100010011 4
b101000000000000100010011 ""
b1010 5
b1010 !"
b1010 ."
1%
#50
0%
#55
b1000 O
b1000 T
b1000 c
1'
06
1P
b101 )
b101 d
b101 ,"
b1000001010001100110011 -
b1000001010001100110011 q
b1000001010001100110011 v
b0 Q
b100000 R
b110011 S
b1 )"
b100 ("
b11 '"
b0 (
b0 *"
b0 0"
b11100 7
b11100 r
b11100 %"
b11100 :"
b11000 0
b11000 u
b11000 &"
b11000 9"
b1100000010000000100011 =
b1100000010000000100011 _
b1100000010000000100011 }
1:
08
b10000 <
b10000 `
b10001000000011 H
b10001000000011 \
b10001000000011 m
b10100 J
b10100 k
b10100 $"
0D
1F
1A
0L
b10100 G
b10100 [
b10100 n
b11000 N
b11000 i
b11000 y
b11000 ?
b11000 f
b11000 t
b11000 w
b1000000000100100000001010110011 @
b1000000000100100000001010110011 g
b1000000000100100000001010110011 s
b1000000000100100000001010110011 z
b1000001000000110110011 4
b1000001000000110110011 ""
b0 5
b0 !"
b0 ."
1%
#60
0%
#65
b10 O
b10 T
b10 c
1'
b1010 )
b1010 d
b1010 ,"
b101 *
b101 e
b101 +"
b1000001100010001100011 -
b1000001100010001100011 q
b1000001100010001100011 v
b11111111111111111111111111111011 M
b11111111111111111111111111111011 ]
b11111111111111111111111111111011 7"
b11111111111111111111111111111011 8"
b11111111111111111111111111111010 5"
b101 6"
b10 Q
b0 R
b10 )"
b1 ("
b0 '"
b100000 7
b100000 r
b100000 %"
b100000 :"
b11100 0
b11100 u
b11100 &"
b11100 9"
b10001000000011 =
b10001000000011 _
b10001000000011 }
0:
1;
18
b10100 <
b10100 `
b1000000000100100000001010110011 H
b1000000000100100000001010110011 \
b1000000000100100000001010110011 m
b101 B
b101 Z
b101 p
b101 2"
b11000 J
b11000 k
b11000 $"
b1000 K
b1000 j
b1000 4"
0F
1L
b11000 G
b11000 [
b11000 n
b11100 N
b11100 i
b11100 y
b11100 ?
b11100 f
b11100 t
b11100 w
b1000001010001100110011 @
b1000001010001100110011 g
b1000001010001100110011 s
b1000001010001100110011 z
b1100000010000000100011 4
b1100000010000000100011 ""
01
1%
#70
0%
#75
1/
0'
b1110110011 -
b1110110011 q
b1110110011 v
1&
b1 M
b1 ]
b1 7"
b1111 8"
b1010 5"
b1010 6"
b100 Q
b1100011 S
b1000 .
b1000 h
b1000 x
b1000 {
b100 '"
b100100 7
b100100 r
b100100 %"
b100100 :"
b100000 0
b100000 u
b100000 &"
b100000 9"
b1000000000100100000001010110011 =
b1000000000100100000001010110011 _
b1000000000100100000001010110011 }
0;
b101 9
b101 V
b101 b
b11111111111111111111111111111011 >
b11111111111111111111111111111011 W
b11111111111111111111111111111011 ^
b11111111111111111111111111111011 |
b11000 <
b11000 `
b1000001010001100110011 H
b1000001010001100110011 \
b1000001010001100110011 m
b1010 B
b1010 Z
b1010 p
b1010 2"
b101 C
b101 o
b101 1"
b11100 J
b11100 k
b11100 $"
b10 K
b10 j
b10 4"
b11100 G
b11100 [
b11100 n
b101000 N
b101000 i
b101000 y
b100000 ?
b100000 f
b100000 t
b100000 w
b1000001100010001100011 @
b1000001100010001100011 g
b1000001100010001100011 s
b1000001100010001100011 z
b10001000000011 4
b10001000000011 ""
13
11
1%
#80
0%
#85
1'
b0 O
b0 T
b0 c
0/
b0 )
b0 d
b0 ,"
b0 *
b0 e
b0 +"
bx -
bx q
bx v
1&
b0 Q
b110011 S
b0 )"
b0 ("
b0 .
b0 h
b0 x
b0 {
b101 '"
b11111111111111111111111111111011 (
b11111111111111111111111111111011 *"
b11111111111111111111111111111011 0"
b101000 7
b101000 r
b101000 %"
b101000 :"
b100100 0
b100100 u
b100100 &"
b100100 9"
b1000001010001100110011 =
b1000001010001100110011 _
b1000001010001100110011 }
b1010 9
b1010 V
b1010 b
b1 >
b1 W
b1 ^
b1 |
b11100 <
b11100 `
b1000001100010001100011 H
b1000001100010001100011 \
b1000001100010001100011 m
b101000 J
b101000 k
b101000 $"
1E
0A
b100000 G
b100000 [
b100000 n
b1000 I
b1000 l
b1000 3"
b100100 N
b100100 i
b100100 y
b100100 ?
b100100 f
b100100 t
b100100 w
b1110110011 @
b1110110011 g
b1110110011 s
b1110110011 z
b1000000000100100000001010110011 4
b1000000000100100000001010110011 ""
b11111111111111111111111111111011 5
b11111111111111111111111111111011 !"
b11111111111111111111111111111011 ."
03
1%
#90
0%
#95
0'
bx )
bx d
bx ,"
bx *
bx e
bx +"
b0 M
b0 ]
b0 7"
0&
b0 8"
b0 5"
b0 6"
bx Q
bx R
bx S
bx )"
bx ("
b110 '"
b1 (
b1 *"
b1 0"
b101100 7
b101100 r
b101100 %"
b101100 :"
b101000 0
b101000 u
b101000 &"
b101000 9"
b1000001100010001100011 =
b1000001100010001100011 _
b1000001100010001100011 }
08
b100000 <
b100000 `
b1110110011 H
b1110110011 \
b1110110011 m
b0 B
b0 Z
b0 p
b0 2"
b0 C
b0 o
b0 1"
b100100 J
b100100 k
b100100 $"
b0 K
b0 j
b0 4"
0E
1A
b100100 G
b100100 [
b100100 n
b0 I
b0 l
b0 3"
b101000 N
b101000 i
b101000 y
b101000 ?
b101000 f
b101000 t
b101000 w
bx @
bx g
bx s
bx z
b1000001010001100110011 4
b1000001010001100110011 ""
b1 5
b1 !"
b1 ."
1%
#100
0%
